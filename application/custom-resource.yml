# https://docs.aws.amazon.com/ja_jp/prescriptive-guidance/latest/patterns/enable-amazon-guardduty-conditionally-by-using-aws-cloudformation-templates.html
# https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/cfn-lambda-function-code-cfnresponsemodule.html
AWSTemplateFormatVersion: "2010-09-09"
Description: AWS CloudFormation sample template that contains a single Lambda function behind an API Gateway
Resources:
  CustomResourceLambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    DeletionPolicy: Delete
    Properties:
      RetentionInDays: 7
      LogGroupName: /aws/lambda/custom-resource
  CustomResourceLambda:
    DependsOn:
      - CustomResourceLambdaLogGroup
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          var response = require('cfn-response');
          exports.handler = function(event, context) {
            var input = parseInt(event.ResourceProperties.Input);
            var responseData = {Value: input * 5};
            response.send(event, context, response.SUCCESS, responseData);
          };
      Description: A greeting function
      FunctionName: custom-resource
      Handler: index.handler
      Role: !GetAtt CustomResourceLambdaExecutionRole.Arn
      Runtime: nodejs16.x
  CustomResourceLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  CustomResource:
    Type: "AWS::CloudFormation::CustomResource"
    Properties:
      ServiceToken: !GetAtt CustomResourceLambda.Arn
      Input: 10
