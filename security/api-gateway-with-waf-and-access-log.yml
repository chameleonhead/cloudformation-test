AWSTemplateFormatVersion: "2010-09-09"
Description: AWS CloudFormation sample template that contains a single Lambda function behind an API Gateway
Resources:
  GreetingLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
            'use strict';
            
            // Greeter Lambda
            exports.handler = (event, context, callback) => {
              console.log('Event:', JSON.stringify(event));
              const name = event.name || 'World';
              const response = {greeting: `Hello, ${name}!`};
              callback(null, response);
            };
      Description: A greeting function
      FunctionName: GreetingLambda
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs16.x
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  GreetingApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: Greeting API
      Description: API used for Greeting requests
      FailOnWarnings: true
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt GreetingLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GreetingApi}/*
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - GreetingRequest
      - LogGroup
    Properties:
      RestApiId: !Ref GreetingApi
      StageName: prod
      StageDescription:
        AccessLogSetting: 
          DestinationArn: !GetAtt LogGroup.Arn
          Format: |
            { "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "caller":"$context.identity.caller", "user":"$context.identity.user","requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath", "status":"$context.status","protocol":"$context.protocol", "responseLength":"$context.responseLength" }
  GreetingResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref GreetingApi
      ParentId: !GetAtt GreetingApi.RootResourceId
      PathPart: greeting
  GreetingRequest:
    DependsOn: LambdaPermission
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Join ["", ["arn:aws:apigateway:", !Ref AWS::Region, ":lambda:path/2015-03-31/functions/", !GetAtt GreetingLambda.Arn, /invocations]]
        IntegrationResponses:
          - StatusCode: "200"
        RequestTemplates:
          application/json: |
            {
              "name": "$input.params('name')"
            }
      RequestParameters:
        method.request.querystring.name: false
      ResourceId: !Ref GreetingResource
      RestApiId: !Ref GreetingApi
      MethodResponses:
        - StatusCode: "200"

  WafAcl:
    Type: AWS::WAFv2::WebACL
    Properties:
      Name: !Sub DefaultWebAcl-${AWS::Region}
      Scope: REGIONAL
      Description: !Sub Web ACL for web api ${GreetingApi}
      DefaultAction:
        Allow: {}
      Rules:
        - Name: AWS-AWSManagedRulesAmazonIpReputationList
          Priority: 0
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesAmazonIpReputationList
          OverrideAction:
            None: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: AWS-AWSManagedRulesAmazonIpReputationList
        - Name: AWS-AWSManagedRulesAnonymousIpList
          Priority: 1
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesAnonymousIpList
          OverrideAction:
            None: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: AWS-AWSManagedRulesAnonymousIpList
        - Name: AWS-AWSManagedRulesKnownBadInputsRuleSet
          Priority: 2
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesKnownBadInputsRuleSet
          OverrideAction:
            None: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: AWS-AWSManagedRulesKnownBadInputsRuleSet
        - Name: AWS-AWSManagedRulesSQLiRuleSet
          Priority: 3
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesSQLiRuleSet
          OverrideAction:
            None: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: AWS-AWSManagedRulesSQLiRuleSet
        - Name: AWS-AWSManagedRulesCommonRuleSet
          Priority: 4
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesCommonRuleSet
          OverrideAction:
            None: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: AWS-AWSManagedRulesCommonRuleSet
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: !Sub DefaultWebAcl-${AWS::Region}

  WebAclAssociation:
    DependsOn:
     - ApiDeployment
    Type: AWS::WAFv2::WebACLAssociation
    Properties: 
      ResourceArn: !Sub arn:aws:apigateway:${AWS::Region}::/restapis/${GreetingApi}/stages/prod
      WebACLArn: !GetAtt WafAcl.Arn
  
  DomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      RegionalCertificateArn: !Ref Certificate
      DomainName: certtest.fishing-logger.com
      EndpointConfiguration: 
        Types:
          - REGIONAL
      SecurityPolicy: TLS_1_2
      Tags: 
        - Key: Name
          Value: TestValue

  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      CertificateTransparencyLoggingPreference: DISABLED
      DomainName: certtest.fishing-logger.com
      DomainValidationOptions:
        - DomainName: certtest.fishing-logger.com
          ValidationDomain: fishing-logger.com
      ValidationMethod: DNS

  BasePathMapping:
    Type: "AWS::ApiGateway::BasePathMapping"
    Properties:
      BasePath: prod
      DomainName: !Ref DomainName
      RestApiId: !Ref GreetingApi
      Stage: prod

  ApiGatewayCloudWatchLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  ApiGatewayAccount:
    DependsOn:
     - LogGroupWelcome
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayCloudWatchLogsRole.Arn

  LogGroupWelcome:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/apigateway/welcome
      RetentionInDays: 730

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/apigateway/restapis/${GreetingApi}/stages/prod
      RetentionInDays: 730

Outputs:
  # can access lambda with path: /prod/greeting
  RootUrl:
    Description: Root URL of the API gateway
    Value: !Sub https://${GreetingApi}.execute-api.${AWS::Region}.amazonaws.com
