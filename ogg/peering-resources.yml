# aws cloudformation create-stack --stack-name peering-resources --template-body file://peering-resources.yml --capabilities CAPABILITY_IAM
# aws cloudformation update-stack --stack-name peering-resources --template-body file://peering-resources.yml --capabilities CAPABILITY_IAM
# aws cloudformation delete-stack --stack-name peering-resources
# aws cloudformation describe-stacks --stack-name peering-resources

AWSTemplateFormatVersion: 2010-09-09

Parameters:
  VpcName:
    Type: String
    Default: peeing-vpc

Resources:
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !ImportValue peering-vpc-PublicSubnetAZ1

  RouteTableRouteForVPCRdsSubnet:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !ImportValue peering-vpc-RouteTableForVPCRdsSubnet
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: OGG Security Group
      VpcId: !ImportValue peering-vpc-VPC
      SecurityGroupIngress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${VpcName}-ogg-security-group-${AWS::Region}

  EC2IAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref EC2IAMRole

  OggInstanceKeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: !Sub ${AWS::StackName}-OggInstanceKeyPair

  OggInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: "{{resolve:ssm:image-builder-ami}}"
      InstanceType: t2.small
      KeyName: !Ref OggInstanceKeyPair
      IamInstanceProfile: !Ref EC2InstanceProfile
      SubnetId: !ImportValue peering-vpc-RdsSubnetAZ1
      SecurityGroupIds:
        - !Ref SecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: gp3
            VolumeSize: 30
      UserData:
        Fn::Base64: |
          #!/bin/bash
          cd /tmp
          dnf install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
          systemctl enable amazon-ssm-agent
          systemctl start amazon-ssm-agent

          sudo su oracle << 'EOF'
          export ORACLE_HOME=/opt/oracle/product/19.3.0/client_1
          export OGG_HOME=/opt/oracle/product/19.1.0/oggcore_1
          export PATH=$OGG_HOME/bin:$ORACLE_HOME/bin:$PATH
          $OGG_HOME/bin/oggca.sh -silent -responseFile /opt/oracle/install/oggca.rsp
          EOF

          /opt/oracle/ogg_deployments/ServiceManager/bin/registerServiceManager.sh
          systemctl enable OracleGoldenGate
          systemctl start OracleGoldenGate
