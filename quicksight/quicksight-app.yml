# aws cloudformation update-stack --stack-name quicksight-app --template-body file://quicksight-app.yml --capabilities CAPABILITY_NAMED_IAM
AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  AppName:
    Type: String
    Default: test-spa-app-with-qs
  LambdaS3Bucket:
    Type: String
    Default: test-lambda-bucket-for-qs
  LambdaS3KeyS3Proxy:
    Type: String
    Default: lambda-proxy.zip
  LambdaS3KeyAuth:
    Type: String
    Default: lambda-auth.zip

Resources:
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: UserPool

  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Ref AppName
      UserPoolId: !Ref CognitoUserPool

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: UserPoolClient
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: true
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - phone
        - email
        - openid
        - profile
        - aws.cognito.signin.user.admin
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        - !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/auth/callback"
      SupportedIdentityProviders:
        - "COGNITO"

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref AppName

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: LambdaS3AccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub "arn:aws:s3:::${S3Bucket}/*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: "/"

  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: S3ProxyHttpApi
      ProtocolType: HTTP
      Description: HTTP API Gateway to proxy requests to S3 via Lambda

  CognitoAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      Name: CognitoAuthorizer
      ApiId: !Ref HttpApi
      AuthorizerType: JWT
      IdentitySource:
        - $request.header.Authorization
      JwtConfiguration:
        Audience:
          - !Ref CognitoUserPoolClient
        Issuer: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPool}

  S3ProxyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: S3ProxyLambdaFunction
      Runtime: python3.10
      Handler: index.lambda_handler
      Environment:
        Variables:
          BUCKET_NAME: !Ref S3Bucket
          IDP_ISSUER: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPool}
          IDP_AUDIENCE: !Ref CognitoUserPool
      Code:
        S3Bucket: !Ref LambdaS3Bucket
        S3Key: !Ref LambdaS3KeyS3Proxy
      Role: !GetAtt LambdaExecutionRole.Arn

  S3ProxyLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref S3ProxyLambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*/*

  S3ProxyLambdaIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      Description: Integration for Lambda proxy
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${S3ProxyLambdaFunction.Arn}/invocations
      PayloadFormatVersion: "2.0"

  DefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: "ANY /{proxy+}"
      Target: !Sub "integrations/${S3ProxyLambdaIntegration}"

  AuthLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: AuthLambdaFunction
      Runtime: python3.10
      Handler: index.lambda_handler
      Environment:
        Variables:
          BUCKET_NAME: !Ref S3Bucket
          IDP_ISSUER: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPool}
          IDP_AUDIENCE: !Ref CognitoUserPool
          IDP_URL: !Sub "https://${CognitoUserPoolDomain}.auth.${AWS::Region}.amazoncognito.com"
          APP_CLIENT_ID: !GetAtt CognitoUserPoolClient.ClientId
          APP_REDIRECT_URI: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/auth/callback"
      Code:
        S3Bucket: !Ref LambdaS3Bucket
        S3Key: !Ref LambdaS3KeyAuth
      Role: !GetAtt LambdaExecutionRole.Arn

  AuthLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AuthLambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*/*

  AuthLambdaIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      Description: Integration for Lambda proxy
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthLambdaFunction.Arn}/invocations
      PayloadFormatVersion: "2.0"

  AuthRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: "ANY /auth/{proxy+}"
      Target: !Sub "integrations/${AuthLambdaIntegration}"

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref HttpApi
      AutoDeploy: true
      StageName: $default

Outputs:
  HttpApiUrl:
    Description: "URL of HTTP API Gateway"
    Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com"
